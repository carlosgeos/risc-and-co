movi 1, 0x7003 // First operand
movi 2, 0x7004 // Second operand
movi 3, 0x0000 // Result register (LSB)
movi 4, 0x0000 // Result register (MSB)

movi 5, 0x0001 // Mask the least significant bit

movi 6, 0x0000 // TMP register
movi 7, 0x0000 // Second operand MSB (when shifting)

beq 0, 0, loop

pre_loop: shifti 1, 1, -1 // Shift first operand to the right for easy LSB check
	shifti 7, 7, 1 // Also shift the content of the MSB of the second operand
          sha 2, 2, 5, operand_msb_inc // Shift the second operand we add in the result with matching bit of the first operand we are multiplying
          beq 0, 0, loop
operand_msb_inc: addi 7, 7, 1 // Increment
loop: beq 1, 0, end
      nand 6, 5, 1 // Verify the LSB of the first operand
      nand 6, 6, 6
      beq 6, 5, acc
      beq 0, 0, pre_loop
acc:  add 4, 4, 7 // Add the MSB of the second operand
      add 3, 3, 2, result_msb_inc // Add the shifted second operand
      beq 0, 0, pre_loop
result_msb_inc: addi 4, 4, 1
      beq 0, 0, pre_loop

end: halt
