// We are going to compare if one number is greater or equal than another number using RiSC16'S 8-instruction architecture
//
// 			R1 	------> called a
//		    R2  ------> called b
//          R3  ------> Result (1 or 0)
//
// The main idea is to check the signs of both numbers and proceed accordingly. We have several scenarios to take into consideration:
// 1.- If both numbers are equal, then we add 1 to register 3
// 2.- If the signs of both numbers are different, we get the sign of the second number (b), if it is positive that means the second
//     number is bigger, then we add 0 to register 3 and 1 otherwise
// 3.- If the signs of both numbers are equal then we negate the second number and do an addition, then we check the sign of the result,
//     if it is positive, then we add 1 to register 3 and 0 otherwise.

// TEST VECTORS

// a)
// 0xFFFE register 1 (negative number)
// 0x0002 register 2 (positive number)
// 0x0000 register 3 (false)

// These test vectors have been chosen because a comparison can be made between two signed numbers, the first one negative and the other positive.

// b)
// 0x0002 register 1 (positive number)
// 0xFFFE register 2 (negative number)
// 0x0001 register 3 (result true)

// These test vectors have been chosen because a comparison can be made between two signed numbers, the first one positive and the other negative.

// c)
// 0x0002 register 1
// 0x0002 register 2
// 0x0001 register 3 (result true)

// These test vectors have been chosen because a comparison can be made between two positive numbers which are equal.

// d)
// 0xFFFE register 1
// 0xFFFE register 2
// 0x0001 register 3 (result true)

// These test vectors have been chosen because a comparison can be made between two negative numbers which are equal.

// e)
// 0x0000 register 1
// 0x0000 register 2
// 0x0001 register 3 (result true)

// These test vectors have been chosen because a comparison can be made between two positive signed numbers which are both 0.

// f)
// 0x0006 register 1
// 0x0003 register 2
// 0x0001 register 3 (result true)

// These test vectors have been chosen because a comparison can be made between two different positive numbers. First number stored in register 1 is bigger than the second number stored in register 2.

// g)
// 0x0003 register 1
// 0x0006 register 2
// 0x0000 register 3 (result false)

// These test vectors have been chosen because a comparison can be made between two different positive numbers. Second number stored in register 2 is bigger than the first number stored in register 1.

// h)
// 0xFFFB register 1
// 0xFFFA register 2
// 0x0001 register 3 (result true)

// These test vectors have been chosen because a comparison can be made between two different negative numbers. First number stored in register 1 is bigger than the second number stored in register 2.

// i)
// 0xFFFA register 1
// 0xFFFB register 2
// 0x0000 register 3 (result false)

// These test vectors have been chosen because a comparison can be made between two different negative numbers. Second number stored in register 2 is bigger than the first number stored in register 1.


			movi 1,0x0004 // store number a
			movi 2,0x0004 // store number b

			addi 3,0,0
         	movi 7, 0x8000  // mask used to get the MSB of a number.
			addi 6,0,-1 	// (0xFFFF) number used to compare the result of the nand operation between the mask and a number.
			beq 1,2,true 	// if both numbers are equal, then go to true.
			nand 4,1,7		// mask reg1 in reg4.
			nand 5,2,7		// mask reg2 in reg5.
			beq 4,5,equal_sign // compare both registers to check if both numbers have the same sign.
			beq 5,6,false // get sign of second number, if it is 0 that means it is positive, therefore second number is bigger.
			beq 0,0,true  // jump to true because a is bigger than b.
equal_sign: nand 4,2,2    // switch all the bits from b.
			addi 4,4,1   // add 1 to result in order to negate number b (complement of 2).
			add  4,1,4  // apply subtraction.
			nand 4,4,7  // get MSB of result.
			beq  4,6, true // compare the sign of the result to check which number is bigger.
false: 		addi 3,0,0
			beq 0,0,end
true:		addi 3,0,1
end:		halt