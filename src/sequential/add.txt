// inputs
        movi 1, 0x0000
        movi 2, 0x8001

// prepare regs for carry verification
        movi 7, 0x8000
        movi 6, 0x7FFE

// calculates the sum and save it in reg3
        add 3, 1, 2

// NAND of registers 1, 2 with 0x8000 mask
        nand 1, 7, 1
        nand 2, 7, 2

// check if both MSB are 0 => definitely no carry, end
        nand 5, 1, 2
        beq 0, 5, end

// otherwise, delete bad candidate for carry
// first check: add the two masks to see if MSBs are 1, 1 or 1, 0
        add 5, 1, 2
        beq 5, 6, flag1         // store a bit in memory

// second check: is the sum MSB a 1 or a 0 ? If 1, store another bit
// in memory since it is another indication of a non-carrying candidate
back1:  nand 7, 7, 3
        movi 6, 0x7FFF
        beq 6, 7, flag2

// now load back the bits, if they sum 2, it was a non carrying
// candidate -> end prematurely.
back2:  lw 1, 0, 0
        lw 2, 0, 1
        add 1, 1, 2
        movi 2, 2
        beq 1, 2, end

// add carry by default if not terminated earlier
default:movi 4, 1

done:   beq 0, 0, end

// subroutines accessed with jumps:
flag1:  movi 1, 1
        sw 1, 0, 0
        beq 0, 0, back1

flag2:  sw 1, 0, 1
        beq 0, 0, back2

end:    halt
